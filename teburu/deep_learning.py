# AUTOGENERATED! DO NOT EDIT! File to edit: ../02_deep_learning.ipynb.

# %% auto 0
__all__ = ['create_learner', 'validate']

# %% ../02_deep_learning.ipynb 5
def create_learner(df, # Dataframe to analyse
                   dep_var, # Name of target variable in Dataframe
                   task): # classification or regression
    "Create a fastai Learner to train"
    cont, cat = cont_cat_split(df, max_card=9000, dep_var=dep_var)
    procs = [Categorify, FillMissing, Normalize]
    y_block = CategoryBlock() if task=="classification" else None
    splits = RandomSplitter()(range_of(df))
    to = TabularPandas(df, procs=procs, cat_names=cat, cont_names=cont,
                       y_names=dep_var, y_block=y_block, splits=splits)
    dls = to.dataloaders()
    learn = tabular_learner(dls, layers=[500,250])
    return learn

# %% ../02_deep_learning.ipynb 7
def validate(df, # Dataframe to analyse
             dep_var, # Name of target variable in Dataframe 
             task): # classification or regression
    "Get accuracy and ROC AUC from Learner after training"
    learn = create_learner(df, dep_var, task)
    with learn.no_bar(), learn.no_logging(): learn.fit_one_cycle(3, 1e-2)
    preds,targs = learn.get_preds()
    if task == "classification":
        roc_auc = roc_auc_score(targs, preds[:,1])
        preds_list = preds.tolist()
        preds_class = [np.argmax(x) for x in preds_list]
        accuracy = accuracy_score(preds_class, targs)
        return roc_auc, accuracy
    else: return np.sqrt(mse(preds, targs))
