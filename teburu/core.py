# AUTOGENERATED! DO NOT EDIT! File to edit: ../00_core.ipynb.

# %% auto 0
__all__ = ['Regressor', 'Classifier']

# %% ../00_core.ipynb 3
from nbdev.showdoc import *
from fastcore.all import *
from sklearn.datasets import load_breast_cancer, load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error as mse
from sklearn.metrics import roc_auc_score
from sklearn.metrics import accuracy_score
import numpy as np
import xgboost as xgb

# %% ../00_core.ipynb 5
class Regressor:
    "Base regressor class"
    
    def __init__(self, 
                 X: 'numpy.ndarray', # Predictor variables
                 y: 'numpy.ndarray', # Target variable
                 model=xgb.XGBRegressor(), # Model form to train
                 fixed_seed=False, # Random or fixed state variable
                 test_size=0.2): # Train-test split portion
        self.X = X
        self.y = y
        self.test_size = 0.2
        # set seed
        if fixed_seed: self.seed = 42
        else: self.seed = np.random.randint(low=0, high=100)
        # split data
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(X, y, 
                                                                                test_size=self.test_size,
                                                                                random_state=self.seed)
        # instantiate model
        self.model = model
            
    def rmse(self, pred, true):
        return np.sqrt(mse(pred, true))
        
    def train(self):
        "Train the model"
        return self.model.fit(self.X_train, self.y_train)
    
    def predict(self):
        "Return predictions for model"
        return self.model.predict(self.X_test)
    
    def score(self):
        "Score the model according to chosen evaluation metric"
        self.model = self.train()
        preds = self.predict()
        return self.rmse(preds, self.y_test)
        
    def __str__(self): 
        return f"Regressor: {len(self.X_train)} training, {len(self.X_test)} testing. \nModel: {self.model}"

# %% ../00_core.ipynb 13
class Classifier:
    "Base classifier class"
    
    def __init__(self, 
                 X: 'numpy.ndarray', # Predictor variables
                 y: 'numpy.ndarray', # Target variable
                 test_size=0.2): # Train-test split portion
        self.X = X
        self.y = y
        self.test_size = 0.2
        # split data
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(X, y, 
                                                                                test_size=self.test_size)
        # instantiate model
        self.model = xgb.XGBClassifier()
        
    def train(self):
        "Train the model"
        return self.model.fit(self.X_train, self.y_train)
    
    def predict(self):
        "Return predictions for model"
        return self.model.predict(self.X_test), self.model.predict_proba(self.X_test)[:,1]
    
    def score(self):
        "Score the model according to chosen evaluation metric"
        self.model = self.train()
        preds, preds_proba = self.predict()
        return accuracy_score(preds, self.y_test), roc_auc_score(self.y_test, preds_proba)
        
    def __str__(self): 
        return f"Classifier: {len(self.X_train)} training, {len(self.X_test)} testing. \nModel: {self.model}"
